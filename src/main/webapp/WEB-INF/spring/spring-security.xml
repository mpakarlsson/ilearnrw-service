<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.1.xsd
	http://www.springframework.org/schema/util
	http://www.springframework.org/schema/util/spring-util-3.0.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- if you want only specific pattern to avoid security, define different 
		http blocks here with security="none" -->

	<http use-expressions="true" pattern="/cache" security="none" />
	<http use-expressions="true" pattern="/" security="none" />
	<http use-expressions="true" pattern="/endpoints-api" security="none" />

	<http use-expressions="true" pattern="/apps/**">
		<intercept-url pattern="/apps/endpoints" access="permitAll" />
		<intercept-url pattern="/apps/login" access="permitAll" />
		<intercept-url pattern="/apps/logout" access="permitAll" />
		<intercept-url pattern="/apps/loginfailed" access="permitAll" />
		<intercept-url pattern="/apps/resources/**" access="permitAll" />
		<intercept-url pattern="/apps/**" access="isAuthenticated()" />
		<form-login login-page="/apps/login" default-target-url="/apps/panel"
			authentication-failure-url="/apps/loginfailed" />
		<logout logout-success-url="/apps/logout" />
	</http>

	<!-- Creates the springSecurityFilterChain with the customer filter customRestFilter 
		injected. -->
	<http create-session="stateless" use-expressions="true"
		entry-point-ref="authenticationEntryPoint">
		<intercept-url pattern="/user/auth" access="permitAll"/>
		<intercept-url pattern="/user/newtokens" access="permitAll"/>
		<intercept-url pattern="/user/details/**" access="permitAll"/>
		<intercept-url pattern="/profile/problemDefinitions" access="permitAll"/>
		<intercept-url pattern="/logs/**" access="permitAll"/>

		<intercept-url pattern="/profile/generateSql" access="permitAll" />
		<intercept-url pattern="/setup" access="permitAll" />
		
		<intercept-url pattern="/text/classify/*" access="permitAll" />

		<!-- this implies that any method has a valid token parameter -->
		<intercept-url pattern="/**" access="isAuthenticated()" />

		<custom-filter ref="basicAuthenticationFilter" position="BASIC_AUTH_FILTER" />
		<custom-filter ref="customRestFilter" after="BASIC_AUTH_FILTER" />
	</http>

	<context:component-scan base-package="com.ilearnrw.common.rest" />
	<context:component-scan base-package="com.ilearnrw.common.security" />
	<context:component-scan base-package="com.ilearnrw.common.security.users.dao" />
	<context:component-scan base-package="com.ilearnrw.common.security.users.services" />

	<beans:bean id="basicAuthenticationFilter"
		class="org.springframework.security.web.authentication.www.BasicAuthenticationFilter">
		<beans:constructor-arg name="authenticationManager"
			ref="apiAuthenticationManager" />
		<beans:constructor-arg name="authenticationEntryPoint"
			ref="authenticationEntryPoint" />
	</beans:bean>

	<beans:bean id="expressionHandler"
		class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler">
		<beans:property name="permissionEvaluator" ref="permissionEvaluator" />
	</beans:bean>


	<beans:bean id="permissionEvaluator"
		class="com.ilearnrw.common.security.UsersPermissionEvaluator">
		<beans:constructor-arg index="0">
			<beans:map key-type="java.lang.String"
				value-type="com.ilearnrw.common.security.PermissionChecker">
				<beans:entry key="READ_PROFILE" value-ref="profilePermissionChecker" />
			</beans:map>
		</beans:constructor-arg>
	</beans:bean>

	<beans:bean id="profilePermissionChecker"
		class="com.ilearnrw.common.security.ProfilePermissionChecker">
	</beans:bean>

	<!-- The authenticationEntryPoint allows us to customise to start the authentication 
		process (i.e. bring up the dialog box when no header is present) The realmName 
		will be displayed in the dialog box, hence not wise to put the username and 
		password in it. -->
	<beans:bean id="authenticationEntryPoint"
		class="org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint">
		<beans:property name="realmName" value="API basic auth" />
	</beans:bean>

	<beans:bean id="customRestFilter"
		class="com.ilearnrw.common.security.RestSecurityFilter">
		<beans:constructor-arg name="authenticationManager"
			ref="restAuthenticationManager" />
		<beans:constructor-arg name="authenticationEntryPoint"
			ref="authenticationEntryPoint" />
		<beans:constructor-arg name="tokenService" ref="tokenService" />

	</beans:bean>

	<!-- <authentication-manager id="restAuthenticationManager"> <authentication-provider 
		ref="restAuthenticationProvider" /> </authentication-manager> -->

	<authentication-manager id="restAuthenticationManager">
		<authentication-provider ref="restAuthenticationProvider" />
	</authentication-manager>

	<authentication-manager alias="apiAuthenticationManager">
		<authentication-provider>
			<user-service id="apiUserDetailsService">
				<user name="api" password="api" authorities="ROLE_API_USER" />
			</user-service>
		</authentication-provider>
	</authentication-manager>

	<beans:bean id="passwordEncoder"
		class="org.springframework.security.crypto.password.StandardPasswordEncoder">
	</beans:bean>

	<beans:bean id="userDetailsService"
		class="com.ilearnrw.common.security.SpringSecurityDaoImpl">
		<beans:property name="dataSource" ref="usersDataSource" />
		<beans:property name="enableGroups" value="true" />
		<beans:property name="enableAuthorities" value="false" />
		<beans:property name="authoritiesByUsernameQuery">
			<beans:value>
				SELECT R.name, U.username
				FROM roles R
				JOIN role_members RM on R.id = RM.roles_id
				JOIN users U on U.id = RM.members_id
				WHERE
				U.username=?
			</beans:value>
		</beans:property>
		<beans:property name="groupAuthoritiesByUsernameQuery">
			<beans:value>
				SELECT R.id, R.name, P.name
				FROM roles R
				JOIN role_members RM on R.id = RM.roles_id
				JOIN users U on U.id = RM.members_id
				JOIN role_permissions RP ON RP.roles_id = R.id
				JOIN permissions P ON P.id = RP.permissions_id
				WHERE U.username=?
			</beans:value>
		</beans:property>
	</beans:bean>

	<!-- The restAuthenticationProvider is the class responsible for verifying 
		that the username and password are valid and returning an AuthenticationToken 
		matching the user requesting the resource and the user's access level. This 
		is the place where you would normally hook into a more complex authentication 
		system and user data layer. -->
	<beans:bean id="restAuthenticationProvider"
		class="com.ilearnrw.common.security.RestAuthenticationProvider">
		<beans:constructor-arg name="userDetailsService"
			ref="userDetailsService" />
	</beans:bean>

	<beans:bean id="secureRandom"
		class="org.springframework.security.core.token.SecureRandomFactoryBean">
	</beans:bean>

	<beans:bean id="tokenService"
		class="org.springframework.security.core.token.KeyBasedPersistenceTokenService">
		<beans:property name="secureRandom" ref="secureRandom"></beans:property>
		<beans:property name="serverSecret" value="ILEARNRW_password0123456789"></beans:property>
		<beans:property name="serverInteger" value="454545"></beans:property>
	</beans:bean>

</beans:beans>
