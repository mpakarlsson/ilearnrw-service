<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<context:component-scan base-package="com.ilearnrw.endpoints" />
	<context:component-scan base-package="com.ilearnrw.services.rest" />
	<context:component-scan base-package="com.ilearnrw.services.datalogger" />
	<context:component-scan base-package="com.ilearnrw.services.profileAccessUpdater" />
	<context:component-scan base-package="com.ilearnrw.usermanager" />

	<security:global-method-security
		secured-annotations="enabled" pre-post-annotations="enabled">
		<security:expression-handler ref="expressionHandler" />
	</security:global-method-security>

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven content-negotiation-manager="cnManager">
	</annotation-driven>

	<beans:bean id="appsConfig"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<beans:property name="location" value="classpath:api.properties" />
	</beans:bean>
	
	<beans:bean id="customerService" 
           class="com.ilearnrw.resource.SpringResourceLoader" />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<beans:bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<!-- All configuration is now done by the manager - since Spring V3.2 -->
		<beans:property name="contentNegotiationManager" ref="cnManager" />
	</beans:bean>
	<beans:bean id="cnManager"
		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<beans:property name="ignoreAcceptHeader" value="true" />
		<beans:property name="defaultContentType" value="application/json" />
	</beans:bean>

	<cache:annotation-driven cache-manager="cacheManager" />

	<!-- generic cache manager -->
	<beans:bean id="cacheManager"
		class="org.springframework.cache.support.SimpleCacheManager">
		<beans:property name="caches">
			<beans:set>
				<beans:bean
					class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">
					<beans:property name="name" value="cube_users" />
				</beans:bean>
				<beans:bean
					class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">
					<beans:property name="name" value="cube_applications" />
				</beans:bean>
				<beans:bean
					class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">
					<beans:property name="name" value="cube_problems" />
				</beans:bean>

				<beans:bean
					class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">
					<beans:property name="name" value="users" />
				</beans:bean>

			</beans:set>
		</beans:property>
	</beans:bean>
	<beans:bean class="org.springframework.mock.web.MockServletContext" />

	<beans:bean id="profileProvider" name="ProfileProvider"
		class="com.ilearnrw.services.profileAccessUpdater.DbProfileProvider">
	</beans:bean>


	<!-- Allow Exceptions to be handled in annotated methods if desired. Otherwise 
		fallback to the 'restExceptionResolver' below: -->
	<beans:bean id="annotationMethodHandlerExceptionResolver"
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver">
		<beans:property name="order" value="0" />
	</beans:bean>
	<beans:bean id="restExceptionResolver"
		class="com.ilearnrw.services.rest.RestExceptionHandler">
		<beans:property name="order" value="100" />
		<beans:property name="errorResolver">
			<beans:bean class="com.ilearnrw.services.rest.DefaultRestErrorResolver">
				<beans:property name="defaultMoreInfoUrl" value="mailto:support@mycompany.com" />
				<beans:property name="exceptionMappingDefinitions">
					<beans:map>
						<!-- 404 -->
						<beans:entry key="com.ilearnrw.services.rest.UnknownResourceException"
							value="404, _exmsg" />

						<!-- 500 (catch all): -->
						<beans:entry key="Throwable" value="500" />
					</beans:map>
				</beans:property>
			</beans:bean>
		</beans:property>
	</beans:bean>

</beans:beans>
